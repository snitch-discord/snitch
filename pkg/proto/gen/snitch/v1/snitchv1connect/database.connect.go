// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: snitch/v1/database.proto

package snitchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "snitch/pkg/proto/gen/snitch/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatabaseServiceName is the fully-qualified name of the DatabaseService service.
	DatabaseServiceName = "snitch.v1.DatabaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseServiceCreateGroupProcedure is the fully-qualified name of the DatabaseService's
	// CreateGroup RPC.
	DatabaseServiceCreateGroupProcedure = "/snitch.v1.DatabaseService/CreateGroup"
	// DatabaseServiceFindGroupByServerProcedure is the fully-qualified name of the DatabaseService's
	// FindGroupByServer RPC.
	DatabaseServiceFindGroupByServerProcedure = "/snitch.v1.DatabaseService/FindGroupByServer"
	// DatabaseServiceAddServerToGroupProcedure is the fully-qualified name of the DatabaseService's
	// AddServerToGroup RPC.
	DatabaseServiceAddServerToGroupProcedure = "/snitch.v1.DatabaseService/AddServerToGroup"
	// DatabaseServiceCreateGroupDatabaseProcedure is the fully-qualified name of the DatabaseService's
	// CreateGroupDatabase RPC.
	DatabaseServiceCreateGroupDatabaseProcedure = "/snitch.v1.DatabaseService/CreateGroupDatabase"
	// DatabaseServiceCreateReportProcedure is the fully-qualified name of the DatabaseService's
	// CreateReport RPC.
	DatabaseServiceCreateReportProcedure = "/snitch.v1.DatabaseService/CreateReport"
	// DatabaseServiceGetReportProcedure is the fully-qualified name of the DatabaseService's GetReport
	// RPC.
	DatabaseServiceGetReportProcedure = "/snitch.v1.DatabaseService/GetReport"
	// DatabaseServiceListReportsProcedure is the fully-qualified name of the DatabaseService's
	// ListReports RPC.
	DatabaseServiceListReportsProcedure = "/snitch.v1.DatabaseService/ListReports"
	// DatabaseServiceDeleteReportProcedure is the fully-qualified name of the DatabaseService's
	// DeleteReport RPC.
	DatabaseServiceDeleteReportProcedure = "/snitch.v1.DatabaseService/DeleteReport"
	// DatabaseServiceCreateUserHistoryProcedure is the fully-qualified name of the DatabaseService's
	// CreateUserHistory RPC.
	DatabaseServiceCreateUserHistoryProcedure = "/snitch.v1.DatabaseService/CreateUserHistory"
	// DatabaseServiceGetUserHistoryProcedure is the fully-qualified name of the DatabaseService's
	// GetUserHistory RPC.
	DatabaseServiceGetUserHistoryProcedure = "/snitch.v1.DatabaseService/GetUserHistory"
	// DatabaseServiceListServersProcedure is the fully-qualified name of the DatabaseService's
	// ListServers RPC.
	DatabaseServiceListServersProcedure = "/snitch.v1.DatabaseService/ListServers"
	// DatabaseServiceCreateBackupProcedure is the fully-qualified name of the DatabaseService's
	// CreateBackup RPC.
	DatabaseServiceCreateBackupProcedure = "/snitch.v1.DatabaseService/CreateBackup"
	// DatabaseServiceListGroupIDsProcedure is the fully-qualified name of the DatabaseService's
	// ListGroupIDs RPC.
	DatabaseServiceListGroupIDsProcedure = "/snitch.v1.DatabaseService/ListGroupIDs"
)

// DatabaseServiceClient is a client for the snitch.v1.DatabaseService service.
type DatabaseServiceClient interface {
	// Metadata operations
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	FindGroupByServer(context.Context, *connect.Request[v1.FindGroupByServerRequest]) (*connect.Response[v1.FindGroupByServerResponse], error)
	AddServerToGroup(context.Context, *connect.Request[v1.AddServerToGroupRequest]) (*connect.Response[v1.AddServerToGroupResponse], error)
	// Group database operations
	CreateGroupDatabase(context.Context, *connect.Request[v1.CreateGroupDatabaseRequest]) (*connect.Response[v1.CreateGroupDatabaseResponse], error)
	// Report operations
	CreateReport(context.Context, *connect.Request[v1.DatabaseServiceCreateReportRequest]) (*connect.Response[v1.DatabaseServiceCreateReportResponse], error)
	GetReport(context.Context, *connect.Request[v1.DatabaseServiceGetReportRequest]) (*connect.Response[v1.DatabaseServiceGetReportResponse], error)
	ListReports(context.Context, *connect.Request[v1.DatabaseServiceListReportsRequest]) (*connect.Response[v1.DatabaseServiceListReportsResponse], error)
	DeleteReport(context.Context, *connect.Request[v1.DatabaseServiceDeleteReportRequest]) (*connect.Response[v1.DatabaseServiceDeleteReportResponse], error)
	// User history operations
	CreateUserHistory(context.Context, *connect.Request[v1.DatabaseServiceCreateUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceCreateUserHistoryResponse], error)
	GetUserHistory(context.Context, *connect.Request[v1.DatabaseServiceGetUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceGetUserHistoryResponse], error)
	// Server operations
	ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error)
	// Backup operations
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	ListGroupIDs(context.Context, *connect.Request[v1.ListGroupIDsRequest]) (*connect.Response[v1.ListGroupIDsResponse], error)
}

// NewDatabaseServiceClient constructs a client for the snitch.v1.DatabaseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatabaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	databaseServiceMethods := v1.File_snitch_v1_database_proto.Services().ByName("DatabaseService").Methods()
	return &databaseServiceClient{
		createGroup: connect.NewClient[v1.CreateGroupRequest, v1.CreateGroupResponse](
			httpClient,
			baseURL+DatabaseServiceCreateGroupProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("CreateGroup")),
			connect.WithClientOptions(opts...),
		),
		findGroupByServer: connect.NewClient[v1.FindGroupByServerRequest, v1.FindGroupByServerResponse](
			httpClient,
			baseURL+DatabaseServiceFindGroupByServerProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("FindGroupByServer")),
			connect.WithClientOptions(opts...),
		),
		addServerToGroup: connect.NewClient[v1.AddServerToGroupRequest, v1.AddServerToGroupResponse](
			httpClient,
			baseURL+DatabaseServiceAddServerToGroupProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("AddServerToGroup")),
			connect.WithClientOptions(opts...),
		),
		createGroupDatabase: connect.NewClient[v1.CreateGroupDatabaseRequest, v1.CreateGroupDatabaseResponse](
			httpClient,
			baseURL+DatabaseServiceCreateGroupDatabaseProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("CreateGroupDatabase")),
			connect.WithClientOptions(opts...),
		),
		createReport: connect.NewClient[v1.DatabaseServiceCreateReportRequest, v1.DatabaseServiceCreateReportResponse](
			httpClient,
			baseURL+DatabaseServiceCreateReportProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("CreateReport")),
			connect.WithClientOptions(opts...),
		),
		getReport: connect.NewClient[v1.DatabaseServiceGetReportRequest, v1.DatabaseServiceGetReportResponse](
			httpClient,
			baseURL+DatabaseServiceGetReportProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("GetReport")),
			connect.WithClientOptions(opts...),
		),
		listReports: connect.NewClient[v1.DatabaseServiceListReportsRequest, v1.DatabaseServiceListReportsResponse](
			httpClient,
			baseURL+DatabaseServiceListReportsProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("ListReports")),
			connect.WithClientOptions(opts...),
		),
		deleteReport: connect.NewClient[v1.DatabaseServiceDeleteReportRequest, v1.DatabaseServiceDeleteReportResponse](
			httpClient,
			baseURL+DatabaseServiceDeleteReportProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("DeleteReport")),
			connect.WithClientOptions(opts...),
		),
		createUserHistory: connect.NewClient[v1.DatabaseServiceCreateUserHistoryRequest, v1.DatabaseServiceCreateUserHistoryResponse](
			httpClient,
			baseURL+DatabaseServiceCreateUserHistoryProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("CreateUserHistory")),
			connect.WithClientOptions(opts...),
		),
		getUserHistory: connect.NewClient[v1.DatabaseServiceGetUserHistoryRequest, v1.DatabaseServiceGetUserHistoryResponse](
			httpClient,
			baseURL+DatabaseServiceGetUserHistoryProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("GetUserHistory")),
			connect.WithClientOptions(opts...),
		),
		listServers: connect.NewClient[v1.ListServersRequest, v1.ListServersResponse](
			httpClient,
			baseURL+DatabaseServiceListServersProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("ListServers")),
			connect.WithClientOptions(opts...),
		),
		createBackup: connect.NewClient[v1.CreateBackupRequest, v1.CreateBackupResponse](
			httpClient,
			baseURL+DatabaseServiceCreateBackupProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("CreateBackup")),
			connect.WithClientOptions(opts...),
		),
		listGroupIDs: connect.NewClient[v1.ListGroupIDsRequest, v1.ListGroupIDsResponse](
			httpClient,
			baseURL+DatabaseServiceListGroupIDsProcedure,
			connect.WithSchema(databaseServiceMethods.ByName("ListGroupIDs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// databaseServiceClient implements DatabaseServiceClient.
type databaseServiceClient struct {
	createGroup         *connect.Client[v1.CreateGroupRequest, v1.CreateGroupResponse]
	findGroupByServer   *connect.Client[v1.FindGroupByServerRequest, v1.FindGroupByServerResponse]
	addServerToGroup    *connect.Client[v1.AddServerToGroupRequest, v1.AddServerToGroupResponse]
	createGroupDatabase *connect.Client[v1.CreateGroupDatabaseRequest, v1.CreateGroupDatabaseResponse]
	createReport        *connect.Client[v1.DatabaseServiceCreateReportRequest, v1.DatabaseServiceCreateReportResponse]
	getReport           *connect.Client[v1.DatabaseServiceGetReportRequest, v1.DatabaseServiceGetReportResponse]
	listReports         *connect.Client[v1.DatabaseServiceListReportsRequest, v1.DatabaseServiceListReportsResponse]
	deleteReport        *connect.Client[v1.DatabaseServiceDeleteReportRequest, v1.DatabaseServiceDeleteReportResponse]
	createUserHistory   *connect.Client[v1.DatabaseServiceCreateUserHistoryRequest, v1.DatabaseServiceCreateUserHistoryResponse]
	getUserHistory      *connect.Client[v1.DatabaseServiceGetUserHistoryRequest, v1.DatabaseServiceGetUserHistoryResponse]
	listServers         *connect.Client[v1.ListServersRequest, v1.ListServersResponse]
	createBackup        *connect.Client[v1.CreateBackupRequest, v1.CreateBackupResponse]
	listGroupIDs        *connect.Client[v1.ListGroupIDsRequest, v1.ListGroupIDsResponse]
}

// CreateGroup calls snitch.v1.DatabaseService.CreateGroup.
func (c *databaseServiceClient) CreateGroup(ctx context.Context, req *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// FindGroupByServer calls snitch.v1.DatabaseService.FindGroupByServer.
func (c *databaseServiceClient) FindGroupByServer(ctx context.Context, req *connect.Request[v1.FindGroupByServerRequest]) (*connect.Response[v1.FindGroupByServerResponse], error) {
	return c.findGroupByServer.CallUnary(ctx, req)
}

// AddServerToGroup calls snitch.v1.DatabaseService.AddServerToGroup.
func (c *databaseServiceClient) AddServerToGroup(ctx context.Context, req *connect.Request[v1.AddServerToGroupRequest]) (*connect.Response[v1.AddServerToGroupResponse], error) {
	return c.addServerToGroup.CallUnary(ctx, req)
}

// CreateGroupDatabase calls snitch.v1.DatabaseService.CreateGroupDatabase.
func (c *databaseServiceClient) CreateGroupDatabase(ctx context.Context, req *connect.Request[v1.CreateGroupDatabaseRequest]) (*connect.Response[v1.CreateGroupDatabaseResponse], error) {
	return c.createGroupDatabase.CallUnary(ctx, req)
}

// CreateReport calls snitch.v1.DatabaseService.CreateReport.
func (c *databaseServiceClient) CreateReport(ctx context.Context, req *connect.Request[v1.DatabaseServiceCreateReportRequest]) (*connect.Response[v1.DatabaseServiceCreateReportResponse], error) {
	return c.createReport.CallUnary(ctx, req)
}

// GetReport calls snitch.v1.DatabaseService.GetReport.
func (c *databaseServiceClient) GetReport(ctx context.Context, req *connect.Request[v1.DatabaseServiceGetReportRequest]) (*connect.Response[v1.DatabaseServiceGetReportResponse], error) {
	return c.getReport.CallUnary(ctx, req)
}

// ListReports calls snitch.v1.DatabaseService.ListReports.
func (c *databaseServiceClient) ListReports(ctx context.Context, req *connect.Request[v1.DatabaseServiceListReportsRequest]) (*connect.Response[v1.DatabaseServiceListReportsResponse], error) {
	return c.listReports.CallUnary(ctx, req)
}

// DeleteReport calls snitch.v1.DatabaseService.DeleteReport.
func (c *databaseServiceClient) DeleteReport(ctx context.Context, req *connect.Request[v1.DatabaseServiceDeleteReportRequest]) (*connect.Response[v1.DatabaseServiceDeleteReportResponse], error) {
	return c.deleteReport.CallUnary(ctx, req)
}

// CreateUserHistory calls snitch.v1.DatabaseService.CreateUserHistory.
func (c *databaseServiceClient) CreateUserHistory(ctx context.Context, req *connect.Request[v1.DatabaseServiceCreateUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceCreateUserHistoryResponse], error) {
	return c.createUserHistory.CallUnary(ctx, req)
}

// GetUserHistory calls snitch.v1.DatabaseService.GetUserHistory.
func (c *databaseServiceClient) GetUserHistory(ctx context.Context, req *connect.Request[v1.DatabaseServiceGetUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceGetUserHistoryResponse], error) {
	return c.getUserHistory.CallUnary(ctx, req)
}

// ListServers calls snitch.v1.DatabaseService.ListServers.
func (c *databaseServiceClient) ListServers(ctx context.Context, req *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error) {
	return c.listServers.CallUnary(ctx, req)
}

// CreateBackup calls snitch.v1.DatabaseService.CreateBackup.
func (c *databaseServiceClient) CreateBackup(ctx context.Context, req *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return c.createBackup.CallUnary(ctx, req)
}

// ListGroupIDs calls snitch.v1.DatabaseService.ListGroupIDs.
func (c *databaseServiceClient) ListGroupIDs(ctx context.Context, req *connect.Request[v1.ListGroupIDsRequest]) (*connect.Response[v1.ListGroupIDsResponse], error) {
	return c.listGroupIDs.CallUnary(ctx, req)
}

// DatabaseServiceHandler is an implementation of the snitch.v1.DatabaseService service.
type DatabaseServiceHandler interface {
	// Metadata operations
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	FindGroupByServer(context.Context, *connect.Request[v1.FindGroupByServerRequest]) (*connect.Response[v1.FindGroupByServerResponse], error)
	AddServerToGroup(context.Context, *connect.Request[v1.AddServerToGroupRequest]) (*connect.Response[v1.AddServerToGroupResponse], error)
	// Group database operations
	CreateGroupDatabase(context.Context, *connect.Request[v1.CreateGroupDatabaseRequest]) (*connect.Response[v1.CreateGroupDatabaseResponse], error)
	// Report operations
	CreateReport(context.Context, *connect.Request[v1.DatabaseServiceCreateReportRequest]) (*connect.Response[v1.DatabaseServiceCreateReportResponse], error)
	GetReport(context.Context, *connect.Request[v1.DatabaseServiceGetReportRequest]) (*connect.Response[v1.DatabaseServiceGetReportResponse], error)
	ListReports(context.Context, *connect.Request[v1.DatabaseServiceListReportsRequest]) (*connect.Response[v1.DatabaseServiceListReportsResponse], error)
	DeleteReport(context.Context, *connect.Request[v1.DatabaseServiceDeleteReportRequest]) (*connect.Response[v1.DatabaseServiceDeleteReportResponse], error)
	// User history operations
	CreateUserHistory(context.Context, *connect.Request[v1.DatabaseServiceCreateUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceCreateUserHistoryResponse], error)
	GetUserHistory(context.Context, *connect.Request[v1.DatabaseServiceGetUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceGetUserHistoryResponse], error)
	// Server operations
	ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error)
	// Backup operations
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	ListGroupIDs(context.Context, *connect.Request[v1.ListGroupIDsRequest]) (*connect.Response[v1.ListGroupIDsResponse], error)
}

// NewDatabaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseServiceHandler(svc DatabaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	databaseServiceMethods := v1.File_snitch_v1_database_proto.Services().ByName("DatabaseService").Methods()
	databaseServiceCreateGroupHandler := connect.NewUnaryHandler(
		DatabaseServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(databaseServiceMethods.ByName("CreateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceFindGroupByServerHandler := connect.NewUnaryHandler(
		DatabaseServiceFindGroupByServerProcedure,
		svc.FindGroupByServer,
		connect.WithSchema(databaseServiceMethods.ByName("FindGroupByServer")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceAddServerToGroupHandler := connect.NewUnaryHandler(
		DatabaseServiceAddServerToGroupProcedure,
		svc.AddServerToGroup,
		connect.WithSchema(databaseServiceMethods.ByName("AddServerToGroup")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateGroupDatabaseHandler := connect.NewUnaryHandler(
		DatabaseServiceCreateGroupDatabaseProcedure,
		svc.CreateGroupDatabase,
		connect.WithSchema(databaseServiceMethods.ByName("CreateGroupDatabase")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateReportHandler := connect.NewUnaryHandler(
		DatabaseServiceCreateReportProcedure,
		svc.CreateReport,
		connect.WithSchema(databaseServiceMethods.ByName("CreateReport")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceGetReportHandler := connect.NewUnaryHandler(
		DatabaseServiceGetReportProcedure,
		svc.GetReport,
		connect.WithSchema(databaseServiceMethods.ByName("GetReport")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceListReportsHandler := connect.NewUnaryHandler(
		DatabaseServiceListReportsProcedure,
		svc.ListReports,
		connect.WithSchema(databaseServiceMethods.ByName("ListReports")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceDeleteReportHandler := connect.NewUnaryHandler(
		DatabaseServiceDeleteReportProcedure,
		svc.DeleteReport,
		connect.WithSchema(databaseServiceMethods.ByName("DeleteReport")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateUserHistoryHandler := connect.NewUnaryHandler(
		DatabaseServiceCreateUserHistoryProcedure,
		svc.CreateUserHistory,
		connect.WithSchema(databaseServiceMethods.ByName("CreateUserHistory")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceGetUserHistoryHandler := connect.NewUnaryHandler(
		DatabaseServiceGetUserHistoryProcedure,
		svc.GetUserHistory,
		connect.WithSchema(databaseServiceMethods.ByName("GetUserHistory")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceListServersHandler := connect.NewUnaryHandler(
		DatabaseServiceListServersProcedure,
		svc.ListServers,
		connect.WithSchema(databaseServiceMethods.ByName("ListServers")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateBackupHandler := connect.NewUnaryHandler(
		DatabaseServiceCreateBackupProcedure,
		svc.CreateBackup,
		connect.WithSchema(databaseServiceMethods.ByName("CreateBackup")),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceListGroupIDsHandler := connect.NewUnaryHandler(
		DatabaseServiceListGroupIDsProcedure,
		svc.ListGroupIDs,
		connect.WithSchema(databaseServiceMethods.ByName("ListGroupIDs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/snitch.v1.DatabaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseServiceCreateGroupProcedure:
			databaseServiceCreateGroupHandler.ServeHTTP(w, r)
		case DatabaseServiceFindGroupByServerProcedure:
			databaseServiceFindGroupByServerHandler.ServeHTTP(w, r)
		case DatabaseServiceAddServerToGroupProcedure:
			databaseServiceAddServerToGroupHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateGroupDatabaseProcedure:
			databaseServiceCreateGroupDatabaseHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateReportProcedure:
			databaseServiceCreateReportHandler.ServeHTTP(w, r)
		case DatabaseServiceGetReportProcedure:
			databaseServiceGetReportHandler.ServeHTTP(w, r)
		case DatabaseServiceListReportsProcedure:
			databaseServiceListReportsHandler.ServeHTTP(w, r)
		case DatabaseServiceDeleteReportProcedure:
			databaseServiceDeleteReportHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateUserHistoryProcedure:
			databaseServiceCreateUserHistoryHandler.ServeHTTP(w, r)
		case DatabaseServiceGetUserHistoryProcedure:
			databaseServiceGetUserHistoryHandler.ServeHTTP(w, r)
		case DatabaseServiceListServersProcedure:
			databaseServiceListServersHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateBackupProcedure:
			databaseServiceCreateBackupHandler.ServeHTTP(w, r)
		case DatabaseServiceListGroupIDsProcedure:
			databaseServiceListGroupIDsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseServiceHandler struct{}

func (UnimplementedDatabaseServiceHandler) CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.CreateGroup is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) FindGroupByServer(context.Context, *connect.Request[v1.FindGroupByServerRequest]) (*connect.Response[v1.FindGroupByServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.FindGroupByServer is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) AddServerToGroup(context.Context, *connect.Request[v1.AddServerToGroupRequest]) (*connect.Response[v1.AddServerToGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.AddServerToGroup is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateGroupDatabase(context.Context, *connect.Request[v1.CreateGroupDatabaseRequest]) (*connect.Response[v1.CreateGroupDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.CreateGroupDatabase is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateReport(context.Context, *connect.Request[v1.DatabaseServiceCreateReportRequest]) (*connect.Response[v1.DatabaseServiceCreateReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.CreateReport is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetReport(context.Context, *connect.Request[v1.DatabaseServiceGetReportRequest]) (*connect.Response[v1.DatabaseServiceGetReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.GetReport is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) ListReports(context.Context, *connect.Request[v1.DatabaseServiceListReportsRequest]) (*connect.Response[v1.DatabaseServiceListReportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.ListReports is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) DeleteReport(context.Context, *connect.Request[v1.DatabaseServiceDeleteReportRequest]) (*connect.Response[v1.DatabaseServiceDeleteReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.DeleteReport is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateUserHistory(context.Context, *connect.Request[v1.DatabaseServiceCreateUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceCreateUserHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.CreateUserHistory is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetUserHistory(context.Context, *connect.Request[v1.DatabaseServiceGetUserHistoryRequest]) (*connect.Response[v1.DatabaseServiceGetUserHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.GetUserHistory is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.ListServers is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.CreateBackup is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) ListGroupIDs(context.Context, *connect.Request[v1.ListGroupIDsRequest]) (*connect.Response[v1.ListGroupIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.DatabaseService.ListGroupIDs is not implemented"))
}
