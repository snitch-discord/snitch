// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: snitch/v1/registration.proto

package snitchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "snitch/pkg/proto/gen/snitch/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegistrarServiceName is the fully-qualified name of the RegistrarService service.
	RegistrarServiceName = "snitch.v1.RegistrarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegistrarServiceRegisterProcedure is the fully-qualified name of the RegistrarService's Register
	// RPC.
	RegistrarServiceRegisterProcedure = "/snitch.v1.RegistrarService/Register"
	// RegistrarServiceGetGroupForServerProcedure is the fully-qualified name of the RegistrarService's
	// GetGroupForServer RPC.
	RegistrarServiceGetGroupForServerProcedure = "/snitch.v1.RegistrarService/GetGroupForServer"
	// RegistrarServiceHasGroupProcedure is the fully-qualified name of the RegistrarService's HasGroup
	// RPC.
	RegistrarServiceHasGroupProcedure = "/snitch.v1.RegistrarService/HasGroup"
)

// RegistrarServiceClient is a client for the snitch.v1.RegistrarService service.
type RegistrarServiceClient interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	GetGroupForServer(context.Context, *connect.Request[v1.GetGroupForServerRequest]) (*connect.Response[v1.GetGroupForServerResponse], error)
	HasGroup(context.Context, *connect.Request[v1.HasGroupRequest]) (*connect.Response[v1.HasGroupResponse], error)
}

// NewRegistrarServiceClient constructs a client for the snitch.v1.RegistrarService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistrarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegistrarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	registrarServiceMethods := v1.File_snitch_v1_registration_proto.Services().ByName("RegistrarService").Methods()
	return &registrarServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+RegistrarServiceRegisterProcedure,
			connect.WithSchema(registrarServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		getGroupForServer: connect.NewClient[v1.GetGroupForServerRequest, v1.GetGroupForServerResponse](
			httpClient,
			baseURL+RegistrarServiceGetGroupForServerProcedure,
			connect.WithSchema(registrarServiceMethods.ByName("GetGroupForServer")),
			connect.WithClientOptions(opts...),
		),
		hasGroup: connect.NewClient[v1.HasGroupRequest, v1.HasGroupResponse](
			httpClient,
			baseURL+RegistrarServiceHasGroupProcedure,
			connect.WithSchema(registrarServiceMethods.ByName("HasGroup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// registrarServiceClient implements RegistrarServiceClient.
type registrarServiceClient struct {
	register          *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	getGroupForServer *connect.Client[v1.GetGroupForServerRequest, v1.GetGroupForServerResponse]
	hasGroup          *connect.Client[v1.HasGroupRequest, v1.HasGroupResponse]
}

// Register calls snitch.v1.RegistrarService.Register.
func (c *registrarServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// GetGroupForServer calls snitch.v1.RegistrarService.GetGroupForServer.
func (c *registrarServiceClient) GetGroupForServer(ctx context.Context, req *connect.Request[v1.GetGroupForServerRequest]) (*connect.Response[v1.GetGroupForServerResponse], error) {
	return c.getGroupForServer.CallUnary(ctx, req)
}

// HasGroup calls snitch.v1.RegistrarService.HasGroup.
func (c *registrarServiceClient) HasGroup(ctx context.Context, req *connect.Request[v1.HasGroupRequest]) (*connect.Response[v1.HasGroupResponse], error) {
	return c.hasGroup.CallUnary(ctx, req)
}

// RegistrarServiceHandler is an implementation of the snitch.v1.RegistrarService service.
type RegistrarServiceHandler interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	GetGroupForServer(context.Context, *connect.Request[v1.GetGroupForServerRequest]) (*connect.Response[v1.GetGroupForServerResponse], error)
	HasGroup(context.Context, *connect.Request[v1.HasGroupRequest]) (*connect.Response[v1.HasGroupResponse], error)
}

// NewRegistrarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistrarServiceHandler(svc RegistrarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	registrarServiceMethods := v1.File_snitch_v1_registration_proto.Services().ByName("RegistrarService").Methods()
	registrarServiceRegisterHandler := connect.NewUnaryHandler(
		RegistrarServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(registrarServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	registrarServiceGetGroupForServerHandler := connect.NewUnaryHandler(
		RegistrarServiceGetGroupForServerProcedure,
		svc.GetGroupForServer,
		connect.WithSchema(registrarServiceMethods.ByName("GetGroupForServer")),
		connect.WithHandlerOptions(opts...),
	)
	registrarServiceHasGroupHandler := connect.NewUnaryHandler(
		RegistrarServiceHasGroupProcedure,
		svc.HasGroup,
		connect.WithSchema(registrarServiceMethods.ByName("HasGroup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/snitch.v1.RegistrarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistrarServiceRegisterProcedure:
			registrarServiceRegisterHandler.ServeHTTP(w, r)
		case RegistrarServiceGetGroupForServerProcedure:
			registrarServiceGetGroupForServerHandler.ServeHTTP(w, r)
		case RegistrarServiceHasGroupProcedure:
			registrarServiceHasGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistrarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistrarServiceHandler struct{}

func (UnimplementedRegistrarServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.RegistrarService.Register is not implemented"))
}

func (UnimplementedRegistrarServiceHandler) GetGroupForServer(context.Context, *connect.Request[v1.GetGroupForServerRequest]) (*connect.Response[v1.GetGroupForServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.RegistrarService.GetGroupForServer is not implemented"))
}

func (UnimplementedRegistrarServiceHandler) HasGroup(context.Context, *connect.Request[v1.HasGroupRequest]) (*connect.Response[v1.HasGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.RegistrarService.HasGroup is not implemented"))
}
