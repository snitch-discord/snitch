// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: snitch/v1/backup.proto

package snitchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "snitch/pkg/proto/gen/snitch/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackupServiceName is the fully-qualified name of the BackupService service.
	BackupServiceName = "snitch.v1.BackupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackupServiceTriggerBackupProcedure is the fully-qualified name of the BackupService's
	// TriggerBackup RPC.
	BackupServiceTriggerBackupProcedure = "/snitch.v1.BackupService/TriggerBackup"
)

// BackupServiceClient is a client for the snitch.v1.BackupService service.
type BackupServiceClient interface {
	TriggerBackup(context.Context, *connect.Request[v1.TriggerBackupRequest]) (*connect.Response[v1.TriggerBackupResponse], error)
}

// NewBackupServiceClient constructs a client for the snitch.v1.BackupService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backupServiceMethods := v1.File_snitch_v1_backup_proto.Services().ByName("BackupService").Methods()
	return &backupServiceClient{
		triggerBackup: connect.NewClient[v1.TriggerBackupRequest, v1.TriggerBackupResponse](
			httpClient,
			baseURL+BackupServiceTriggerBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("TriggerBackup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backupServiceClient implements BackupServiceClient.
type backupServiceClient struct {
	triggerBackup *connect.Client[v1.TriggerBackupRequest, v1.TriggerBackupResponse]
}

// TriggerBackup calls snitch.v1.BackupService.TriggerBackup.
func (c *backupServiceClient) TriggerBackup(ctx context.Context, req *connect.Request[v1.TriggerBackupRequest]) (*connect.Response[v1.TriggerBackupResponse], error) {
	return c.triggerBackup.CallUnary(ctx, req)
}

// BackupServiceHandler is an implementation of the snitch.v1.BackupService service.
type BackupServiceHandler interface {
	TriggerBackup(context.Context, *connect.Request[v1.TriggerBackupRequest]) (*connect.Response[v1.TriggerBackupResponse], error)
}

// NewBackupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackupServiceHandler(svc BackupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backupServiceMethods := v1.File_snitch_v1_backup_proto.Services().ByName("BackupService").Methods()
	backupServiceTriggerBackupHandler := connect.NewUnaryHandler(
		BackupServiceTriggerBackupProcedure,
		svc.TriggerBackup,
		connect.WithSchema(backupServiceMethods.ByName("TriggerBackup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/snitch.v1.BackupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackupServiceTriggerBackupProcedure:
			backupServiceTriggerBackupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackupServiceHandler struct{}

func (UnimplementedBackupServiceHandler) TriggerBackup(context.Context, *connect.Request[v1.TriggerBackupRequest]) (*connect.Response[v1.TriggerBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.BackupService.TriggerBackup is not implemented"))
}
