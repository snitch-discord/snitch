// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: snitch/v1/user.proto

package snitchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "snitch/pkg/proto/gen/snitch/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserHistoryServiceName is the fully-qualified name of the UserHistoryService service.
	UserHistoryServiceName = "snitch.v1.UserHistoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserHistoryServiceCreateUserHistoryProcedure is the fully-qualified name of the
	// UserHistoryService's CreateUserHistory RPC.
	UserHistoryServiceCreateUserHistoryProcedure = "/snitch.v1.UserHistoryService/CreateUserHistory"
	// UserHistoryServiceListUserHistoryProcedure is the fully-qualified name of the
	// UserHistoryService's ListUserHistory RPC.
	UserHistoryServiceListUserHistoryProcedure = "/snitch.v1.UserHistoryService/ListUserHistory"
)

// UserHistoryServiceClient is a client for the snitch.v1.UserHistoryService service.
type UserHistoryServiceClient interface {
	CreateUserHistory(context.Context, *connect.Request[v1.CreateUserHistoryRequest]) (*connect.Response[v1.CreateUserHistoryResponse], error)
	ListUserHistory(context.Context, *connect.Request[v1.ListUserHistoryRequest]) (*connect.Response[v1.ListUserHistoryResponse], error)
}

// NewUserHistoryServiceClient constructs a client for the snitch.v1.UserHistoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserHistoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserHistoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userHistoryServiceMethods := v1.File_snitch_v1_user_proto.Services().ByName("UserHistoryService").Methods()
	return &userHistoryServiceClient{
		createUserHistory: connect.NewClient[v1.CreateUserHistoryRequest, v1.CreateUserHistoryResponse](
			httpClient,
			baseURL+UserHistoryServiceCreateUserHistoryProcedure,
			connect.WithSchema(userHistoryServiceMethods.ByName("CreateUserHistory")),
			connect.WithClientOptions(opts...),
		),
		listUserHistory: connect.NewClient[v1.ListUserHistoryRequest, v1.ListUserHistoryResponse](
			httpClient,
			baseURL+UserHistoryServiceListUserHistoryProcedure,
			connect.WithSchema(userHistoryServiceMethods.ByName("ListUserHistory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userHistoryServiceClient implements UserHistoryServiceClient.
type userHistoryServiceClient struct {
	createUserHistory *connect.Client[v1.CreateUserHistoryRequest, v1.CreateUserHistoryResponse]
	listUserHistory   *connect.Client[v1.ListUserHistoryRequest, v1.ListUserHistoryResponse]
}

// CreateUserHistory calls snitch.v1.UserHistoryService.CreateUserHistory.
func (c *userHistoryServiceClient) CreateUserHistory(ctx context.Context, req *connect.Request[v1.CreateUserHistoryRequest]) (*connect.Response[v1.CreateUserHistoryResponse], error) {
	return c.createUserHistory.CallUnary(ctx, req)
}

// ListUserHistory calls snitch.v1.UserHistoryService.ListUserHistory.
func (c *userHistoryServiceClient) ListUserHistory(ctx context.Context, req *connect.Request[v1.ListUserHistoryRequest]) (*connect.Response[v1.ListUserHistoryResponse], error) {
	return c.listUserHistory.CallUnary(ctx, req)
}

// UserHistoryServiceHandler is an implementation of the snitch.v1.UserHistoryService service.
type UserHistoryServiceHandler interface {
	CreateUserHistory(context.Context, *connect.Request[v1.CreateUserHistoryRequest]) (*connect.Response[v1.CreateUserHistoryResponse], error)
	ListUserHistory(context.Context, *connect.Request[v1.ListUserHistoryRequest]) (*connect.Response[v1.ListUserHistoryResponse], error)
}

// NewUserHistoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserHistoryServiceHandler(svc UserHistoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userHistoryServiceMethods := v1.File_snitch_v1_user_proto.Services().ByName("UserHistoryService").Methods()
	userHistoryServiceCreateUserHistoryHandler := connect.NewUnaryHandler(
		UserHistoryServiceCreateUserHistoryProcedure,
		svc.CreateUserHistory,
		connect.WithSchema(userHistoryServiceMethods.ByName("CreateUserHistory")),
		connect.WithHandlerOptions(opts...),
	)
	userHistoryServiceListUserHistoryHandler := connect.NewUnaryHandler(
		UserHistoryServiceListUserHistoryProcedure,
		svc.ListUserHistory,
		connect.WithSchema(userHistoryServiceMethods.ByName("ListUserHistory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/snitch.v1.UserHistoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserHistoryServiceCreateUserHistoryProcedure:
			userHistoryServiceCreateUserHistoryHandler.ServeHTTP(w, r)
		case UserHistoryServiceListUserHistoryProcedure:
			userHistoryServiceListUserHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserHistoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserHistoryServiceHandler struct{}

func (UnimplementedUserHistoryServiceHandler) CreateUserHistory(context.Context, *connect.Request[v1.CreateUserHistoryRequest]) (*connect.Response[v1.CreateUserHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.UserHistoryService.CreateUserHistory is not implemented"))
}

func (UnimplementedUserHistoryServiceHandler) ListUserHistory(context.Context, *connect.Request[v1.ListUserHistoryRequest]) (*connect.Response[v1.ListUserHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("snitch.v1.UserHistoryService.ListUserHistory is not implemented"))
}
