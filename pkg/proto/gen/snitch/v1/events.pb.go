// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: snitch/v1/events.proto

package snitchv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED    EventType = 0
	EventType_EVENT_TYPE_REPORT_CREATED EventType = 1
	EventType_EVENT_TYPE_REPORT_DELETED EventType = 2
	EventType_EVENT_TYPE_USER_BANNED    EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_REPORT_CREATED",
		2: "EVENT_TYPE_REPORT_DELETED",
		3: "EVENT_TYPE_USER_BANNED",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":    0,
		"EVENT_TYPE_REPORT_CREATED": 1,
		"EVENT_TYPE_REPORT_DELETED": 2,
		"EVENT_TYPE_USER_BANNED":    3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_snitch_v1_events_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_snitch_v1_events_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_snitch_v1_events_proto_rawDescGZIP(), []int{0}
}

type Event struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=snitch.v1.EventType" json:"type,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerId  string                 `protobuf:"bytes,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	GroupId   string                 `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*Event_ReportCreated
	//	*Event_ReportDeleted
	//	*Event_UserBanned
	Data          isEvent_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_snitch_v1_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_snitch_v1_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_snitch_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *Event) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Event) GetData() isEvent_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetReportCreated() *ReportCreatedEvent {
	if x != nil {
		if x, ok := x.Data.(*Event_ReportCreated); ok {
			return x.ReportCreated
		}
	}
	return nil
}

func (x *Event) GetReportDeleted() *ReportDeletedEvent {
	if x != nil {
		if x, ok := x.Data.(*Event_ReportDeleted); ok {
			return x.ReportDeleted
		}
	}
	return nil
}

func (x *Event) GetUserBanned() *UserBannedEvent {
	if x != nil {
		if x, ok := x.Data.(*Event_UserBanned); ok {
			return x.UserBanned
		}
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_ReportCreated struct {
	ReportCreated *ReportCreatedEvent `protobuf:"bytes,5,opt,name=report_created,json=reportCreated,proto3,oneof"`
}

type Event_ReportDeleted struct {
	ReportDeleted *ReportDeletedEvent `protobuf:"bytes,6,opt,name=report_deleted,json=reportDeleted,proto3,oneof"`
}

type Event_UserBanned struct {
	UserBanned *UserBannedEvent `protobuf:"bytes,7,opt,name=user_banned,json=userBanned,proto3,oneof"`
}

func (*Event_ReportCreated) isEvent_Data() {}

func (*Event_ReportDeleted) isEvent_Data() {}

func (*Event_UserBanned) isEvent_Data() {}

type ReportCreatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportId      int64                  `protobuf:"varint,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	ReporterId    string                 `protobuf:"bytes,2,opt,name=reporter_id,json=reporterId,proto3" json:"reporter_id,omitempty"`
	ReportedId    string                 `protobuf:"bytes,3,opt,name=reported_id,json=reportedId,proto3" json:"reported_id,omitempty"`
	ReportText    string                 `protobuf:"bytes,4,opt,name=report_text,json=reportText,proto3" json:"report_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportCreatedEvent) Reset() {
	*x = ReportCreatedEvent{}
	mi := &file_snitch_v1_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCreatedEvent) ProtoMessage() {}

func (x *ReportCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snitch_v1_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCreatedEvent.ProtoReflect.Descriptor instead.
func (*ReportCreatedEvent) Descriptor() ([]byte, []int) {
	return file_snitch_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *ReportCreatedEvent) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

func (x *ReportCreatedEvent) GetReporterId() string {
	if x != nil {
		return x.ReporterId
	}
	return ""
}

func (x *ReportCreatedEvent) GetReportedId() string {
	if x != nil {
		return x.ReportedId
	}
	return ""
}

func (x *ReportCreatedEvent) GetReportText() string {
	if x != nil {
		return x.ReportText
	}
	return ""
}

type ReportDeletedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportId      int64                  `protobuf:"varint,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportDeletedEvent) Reset() {
	*x = ReportDeletedEvent{}
	mi := &file_snitch_v1_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeletedEvent) ProtoMessage() {}

func (x *ReportDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snitch_v1_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeletedEvent.ProtoReflect.Descriptor instead.
func (*ReportDeletedEvent) Descriptor() ([]byte, []int) {
	return file_snitch_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *ReportDeletedEvent) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

type UserBannedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerId      string                 `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserBannedEvent) Reset() {
	*x = UserBannedEvent{}
	mi := &file_snitch_v1_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBannedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBannedEvent) ProtoMessage() {}

func (x *UserBannedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_snitch_v1_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBannedEvent.ProtoReflect.Descriptor instead.
func (*UserBannedEvent) Descriptor() ([]byte, []int) {
	return file_snitch_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *UserBannedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserBannedEvent) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *UserBannedEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventTypes    []EventType            `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=snitch.v1.EventType" json:"event_types,omitempty"`
	GroupId       string                 `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_snitch_v1_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snitch_v1_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_snitch_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeRequest) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *SubscribeRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

var File_snitch_v1_events_proto protoreflect.FileDescriptor

const file_snitch_v1_events_proto_rawDesc = "" +
	"\n" +
	"\x16snitch/v1/events.proto\x12\tsnitch.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xfa\x02\n" +
	"\x05Event\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.snitch.v1.EventTypeR\x04type\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1b\n" +
	"\tserver_id\x18\x03 \x01(\tR\bserverId\x12\x19\n" +
	"\bgroup_id\x18\x04 \x01(\tR\agroupId\x12F\n" +
	"\x0ereport_created\x18\x05 \x01(\v2\x1d.snitch.v1.ReportCreatedEventH\x00R\rreportCreated\x12F\n" +
	"\x0ereport_deleted\x18\x06 \x01(\v2\x1d.snitch.v1.ReportDeletedEventH\x00R\rreportDeleted\x12=\n" +
	"\vuser_banned\x18\a \x01(\v2\x1a.snitch.v1.UserBannedEventH\x00R\n" +
	"userBannedB\x06\n" +
	"\x04data\"\x94\x01\n" +
	"\x12ReportCreatedEvent\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\x03R\breportId\x12\x1f\n" +
	"\vreporter_id\x18\x02 \x01(\tR\n" +
	"reporterId\x12\x1f\n" +
	"\vreported_id\x18\x03 \x01(\tR\n" +
	"reportedId\x12\x1f\n" +
	"\vreport_text\x18\x04 \x01(\tR\n" +
	"reportText\"1\n" +
	"\x12ReportDeletedEvent\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\x03R\breportId\"_\n" +
	"\x0fUserBannedEvent\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tserver_id\x18\x02 \x01(\tR\bserverId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"d\n" +
	"\x10SubscribeRequest\x125\n" +
	"\vevent_types\x18\x01 \x03(\x0e2\x14.snitch.v1.EventTypeR\n" +
	"eventTypes\x12\x19\n" +
	"\bgroup_id\x18\x02 \x01(\tR\agroupId*\x81\x01\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19EVENT_TYPE_REPORT_CREATED\x10\x01\x12\x1d\n" +
	"\x19EVENT_TYPE_REPORT_DELETED\x10\x02\x12\x1a\n" +
	"\x16EVENT_TYPE_USER_BANNED\x10\x032L\n" +
	"\fEventService\x12<\n" +
	"\tSubscribe\x12\x1b.snitch.v1.SubscribeRequest\x1a\x10.snitch.v1.Event0\x01B)Z'snitch/pkg/proto/gen/snitch/v1;snitchv1b\x06proto3"

var (
	file_snitch_v1_events_proto_rawDescOnce sync.Once
	file_snitch_v1_events_proto_rawDescData []byte
)

func file_snitch_v1_events_proto_rawDescGZIP() []byte {
	file_snitch_v1_events_proto_rawDescOnce.Do(func() {
		file_snitch_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_snitch_v1_events_proto_rawDesc), len(file_snitch_v1_events_proto_rawDesc)))
	})
	return file_snitch_v1_events_proto_rawDescData
}

var file_snitch_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snitch_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_snitch_v1_events_proto_goTypes = []any{
	(EventType)(0),                // 0: snitch.v1.EventType
	(*Event)(nil),                 // 1: snitch.v1.Event
	(*ReportCreatedEvent)(nil),    // 2: snitch.v1.ReportCreatedEvent
	(*ReportDeletedEvent)(nil),    // 3: snitch.v1.ReportDeletedEvent
	(*UserBannedEvent)(nil),       // 4: snitch.v1.UserBannedEvent
	(*SubscribeRequest)(nil),      // 5: snitch.v1.SubscribeRequest
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_snitch_v1_events_proto_depIdxs = []int32{
	0, // 0: snitch.v1.Event.type:type_name -> snitch.v1.EventType
	6, // 1: snitch.v1.Event.timestamp:type_name -> google.protobuf.Timestamp
	2, // 2: snitch.v1.Event.report_created:type_name -> snitch.v1.ReportCreatedEvent
	3, // 3: snitch.v1.Event.report_deleted:type_name -> snitch.v1.ReportDeletedEvent
	4, // 4: snitch.v1.Event.user_banned:type_name -> snitch.v1.UserBannedEvent
	0, // 5: snitch.v1.SubscribeRequest.event_types:type_name -> snitch.v1.EventType
	5, // 6: snitch.v1.EventService.Subscribe:input_type -> snitch.v1.SubscribeRequest
	1, // 7: snitch.v1.EventService.Subscribe:output_type -> snitch.v1.Event
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_snitch_v1_events_proto_init() }
func file_snitch_v1_events_proto_init() {
	if File_snitch_v1_events_proto != nil {
		return
	}
	file_snitch_v1_events_proto_msgTypes[0].OneofWrappers = []any{
		(*Event_ReportCreated)(nil),
		(*Event_ReportDeleted)(nil),
		(*Event_UserBanned)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_snitch_v1_events_proto_rawDesc), len(file_snitch_v1_events_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snitch_v1_events_proto_goTypes,
		DependencyIndexes: file_snitch_v1_events_proto_depIdxs,
		EnumInfos:         file_snitch_v1_events_proto_enumTypes,
		MessageInfos:      file_snitch_v1_events_proto_msgTypes,
	}.Build()
	File_snitch_v1_events_proto = out.File
	file_snitch_v1_events_proto_goTypes = nil
	file_snitch_v1_events_proto_depIdxs = nil
}
