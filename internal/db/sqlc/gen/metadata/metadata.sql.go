// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: metadata.sql

package metadata

import (
	"context"
)

const addServerToGroup = `-- name: AddServerToGroup :exec
INSERT INTO servers (server_id, output_channel, group_id, permission_level) VALUES (?, ?, ?, ?)
`

type AddServerToGroupParams struct {
	ServerID        string `json:"server_id"`
	OutputChannel   int64  `json:"output_channel"`
	GroupID         string `json:"group_id"`
	PermissionLevel int64  `json:"permission_level"`
}

func (q *Queries) AddServerToGroup(ctx context.Context, arg AddServerToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addServerToGroup,
		arg.ServerID,
		arg.OutputChannel,
		arg.GroupID,
		arg.PermissionLevel,
	)
	return err
}

const createGroup = `-- name: CreateGroup :exec

INSERT INTO groups (group_id, group_name) VALUES (?, ?)
`

type CreateGroupParams struct {
	GroupID   string `json:"group_id"`
	GroupName string `json:"group_name"`
}

// Metadata database queries (groups and servers)
func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) error {
	_, err := q.db.ExecContext(ctx, createGroup, arg.GroupID, arg.GroupName)
	return err
}

const findGroupByServer = `-- name: FindGroupByServer :one
SELECT group_id FROM servers WHERE server_id = ?
`

func (q *Queries) FindGroupByServer(ctx context.Context, serverID string) (string, error) {
	row := q.db.QueryRowContext(ctx, findGroupByServer, serverID)
	var group_id string
	err := row.Scan(&group_id)
	return group_id, err
}

const listServers = `-- name: ListServers :many
SELECT server_id, group_id FROM servers WHERE group_id = ?
`

type ListServersRow struct {
	ServerID string `json:"server_id"`
	GroupID  string `json:"group_id"`
}

func (q *Queries) ListServers(ctx context.Context, groupID string) ([]ListServersRow, error) {
	rows, err := q.db.QueryContext(ctx, listServers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListServersRow{}
	for rows.Next() {
		var i ListServersRow
		if err := rows.Scan(&i.ServerID, &i.GroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
