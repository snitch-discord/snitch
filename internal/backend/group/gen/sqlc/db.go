// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addServerStmt, err = db.PrepareContext(ctx, addServer); err != nil {
		return nil, fmt.Errorf("error preparing query AddServer: %w", err)
	}
	if q.addUserStmt, err = db.PrepareContext(ctx, addUser); err != nil {
		return nil, fmt.Errorf("error preparing query AddUser: %w", err)
	}
	if q.createReportStmt, err = db.PrepareContext(ctx, createReport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReport: %w", err)
	}
	if q.createReportTableStmt, err = db.PrepareContext(ctx, createReportTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReportTable: %w", err)
	}
	if q.createServerTableStmt, err = db.PrepareContext(ctx, createServerTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateServerTable: %w", err)
	}
	if q.createUserHistoryStmt, err = db.PrepareContext(ctx, createUserHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserHistory: %w", err)
	}
	if q.createUserHistoryTableStmt, err = db.PrepareContext(ctx, createUserHistoryTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserHistoryTable: %w", err)
	}
	if q.createUserTableStmt, err = db.PrepareContext(ctx, createUserTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserTable: %w", err)
	}
	if q.deleteReportStmt, err = db.PrepareContext(ctx, deleteReport); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteReport: %w", err)
	}
	if q.getAllReportsStmt, err = db.PrepareContext(ctx, getAllReports); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllReports: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserHistoryStmt, err = db.PrepareContext(ctx, getUserHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserHistory: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addServerStmt != nil {
		if cerr := q.addServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addServerStmt: %w", cerr)
		}
	}
	if q.addUserStmt != nil {
		if cerr := q.addUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserStmt: %w", cerr)
		}
	}
	if q.createReportStmt != nil {
		if cerr := q.createReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportStmt: %w", cerr)
		}
	}
	if q.createReportTableStmt != nil {
		if cerr := q.createReportTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReportTableStmt: %w", cerr)
		}
	}
	if q.createServerTableStmt != nil {
		if cerr := q.createServerTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServerTableStmt: %w", cerr)
		}
	}
	if q.createUserHistoryStmt != nil {
		if cerr := q.createUserHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserHistoryStmt: %w", cerr)
		}
	}
	if q.createUserHistoryTableStmt != nil {
		if cerr := q.createUserHistoryTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserHistoryTableStmt: %w", cerr)
		}
	}
	if q.createUserTableStmt != nil {
		if cerr := q.createUserTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserTableStmt: %w", cerr)
		}
	}
	if q.deleteReportStmt != nil {
		if cerr := q.deleteReportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteReportStmt: %w", cerr)
		}
	}
	if q.getAllReportsStmt != nil {
		if cerr := q.getAllReportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllReportsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserHistoryStmt != nil {
		if cerr := q.getUserHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserHistoryStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addServerStmt              *sql.Stmt
	addUserStmt                *sql.Stmt
	createReportStmt           *sql.Stmt
	createReportTableStmt      *sql.Stmt
	createServerTableStmt      *sql.Stmt
	createUserHistoryStmt      *sql.Stmt
	createUserHistoryTableStmt *sql.Stmt
	createUserTableStmt        *sql.Stmt
	deleteReportStmt           *sql.Stmt
	getAllReportsStmt          *sql.Stmt
	getUserStmt                *sql.Stmt
	getUserHistoryStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addServerStmt:              q.addServerStmt,
		addUserStmt:                q.addUserStmt,
		createReportStmt:           q.createReportStmt,
		createReportTableStmt:      q.createReportTableStmt,
		createServerTableStmt:      q.createServerTableStmt,
		createUserHistoryStmt:      q.createUserHistoryStmt,
		createUserHistoryTableStmt: q.createUserHistoryTableStmt,
		createUserTableStmt:        q.createUserTableStmt,
		deleteReportStmt:           q.deleteReportStmt,
		getAllReportsStmt:          q.getAllReportsStmt,
		getUserStmt:                q.getUserStmt,
		getUserHistoryStmt:         q.getUserHistoryStmt,
	}
}
